@page "/players"
@using CharacterBuilderShared.Models;
@using CharacterBuilderWeb.Services;
@inject PlayerApiService playerApiService;
@inject IJSRuntime JSRuntime;
@inject ILogger<Register> logger
@inject IConfiguration Configuration


@rendermode InteractiveServer


<PageTitle>Players</PageTitle>

<h1>This is a list of all the players and their Id tags. This is used for players to assign characters to themselves.</h1>

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Username</th>
            @if (development) {
                <th>Pin</th>
            }

        </tr>
    </thead>
    <tbody>
        @foreach (var player in players) {
            <tr>
                <td>@player.PlayerName</td>
                <td>@player.Username</td>
                @if (development) {
                    <td>@player.Pin</td>
                }
                @if (!noplayers) {
                    <td>
                        <button @onclick="() => DeletePlayer(player.Id)">Delete Player</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Player> players = new List<Player>();
    private bool noplayers = false;
    public bool development;

    protected override async Task OnInitializedAsync() {
        await LoadPlayerData();
        CharacterMonitoring.playerpagecounter += 1;
        var devValue = Configuration["InDevelopmentDerp"];
        if (devValue == null) {
            devValue = "false";
        }
        // Parse the string value to a boolean
        development = bool.Parse(devValue);
    }

    private async Task LoadPlayerData() {
        var listplayers = await playerApiService.GetAllPlayers();
        if (listplayers == null || listplayers.Count == 0) {
            listplayers = new List<Player> { new Player { PlayerName = "No Players Yet!", Id = 0 } };
            noplayers = true;
        }
        players = listplayers;
    }

    private async Task DeletePlayer(int playerId) {
        var enteredPinString = await JSRuntime.InvokeAsync<string>("prompt", "Please enter the player PIN:");
        if(enteredPinString == null){ return; }
        if (!int.TryParse(enteredPinString, out int enteredPin)) {
            // Handle invalid input (enteredPinString is not a valid integer)
            await JSRuntime.InvokeVoidAsync("alert", "Invalid PIN format. Please enter a valid integer PIN.");
            return;
        }

        // Check if the entered PIN matches the player's PIN
        var player = players.FirstOrDefault(p => p.Id == playerId && p.Pin == enteredPin);
        if (player != null) {
            await playerApiService.DeleteThisPlayer(playerId);
            StateHasChanged();
        } else {
            logger.LogInformation("Pin entered insuccessfully for player deletion");
        }
    }
}