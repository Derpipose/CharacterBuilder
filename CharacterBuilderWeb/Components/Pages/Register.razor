@page "/register"
@using System.Text.RegularExpressions
@using CharacterBuilderShared.Models
@using CharacterBuilderWeb.Services;
@inject PlayerApiService playerApiService;
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Registration</PageTitle>

<h1>Welcome in! Please come up with a user name and a four digit pin!</h1>


<EditForm Model="@player" OnValidSubmit="@HandleValidSubmit">

    <label for="PlayerName" class="form-label">PlayerName</label>
    <InputText id="PlayerName" class="form-control"
               @bind-Value="player.PlayerName" />
    <label for="Username" class="form-label">Username</label>
    <InputText id="Username" class="form-control"
               @bind-Value="player.Username" @oninput="CheckUsernameAvailability" />
    @if (!usernamecheck) {
        <div class="alert alert-warning" role="alert">
            Username is already taken. Please choose a different one.
        </div>
    }
    //check username avaliablity on change
    //if username check is false show nothing, if true show a warning saying the username is taken already
    <label for="Pin" class="form-label">4 digit pin</label>
    <InputNumber id="Pin" class="form-control"
                 @bind-Value="player.Pin" />
    <label for="Veteran" class="form-label">Have you been in a campaign before?</label>
    <InputCheckbox id="Veteran" class="form-check-input"
                   @bind-Value="player.Veteran" />
    <p></p>
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading) {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        } else {
            <span>Add</span>
        }
    </button>
</EditForm>

@code {
    private Player player = new Player();
    private bool isLoading = false;
    private bool usernamecheck = true;

    protected override void OnInitialized() {
        player = new Player();
    }

    // Method to handle form submission
    private async Task HandleValidSubmit() {
        isLoading = true;
        // Validate form inputs
        if (string.IsNullOrEmpty(player.Username) || string.IsNullOrEmpty(player.PlayerName) || player.Pin < 1000 || player.Pin > 9999) {
            isLoading = false; 
            return;
        }



        //TODO: Create way to check if username has been used already and throw the form back to get a new
        //user name if that is the case.

        await playerApiService.AddThisPlayer(player);
        Console.WriteLine("I created a player and will now do a navigate!");

        NavigationManager.NavigateTo("/players");
    }

    private async Task<bool> checkUsername() {
        List<Player> ?listplayers = await playerApiService.GetAllPlayers();
        if (listplayers == null || listplayers.Count == 0) {
            return true;
        } else {
            foreach(Player playercheck in listplayers) {
                if (playercheck.Username == player.Username) {
                    return false;
                }
            }
            return true;
        }


    }

    private async Task CheckUsernameAvailability(ChangeEventArgs e) {
        string ?v = e.Value?.ToString();
        if(v is null) {
            v = "";
        }
        player.Username = v;
        usernamecheck = await checkUsername();
        StateHasChanged(); 
    }
}
