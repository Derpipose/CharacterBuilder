@page "/makecharacter"
@using System.Text.RegularExpressions
@using CharacterBuilderShared.Models
@using CharacterBuilderWeb.Services
@inject PlayerApiService playerApiService
@inject CharacterApiService characterApiService
@inject CharRaceApiService charRaceApiService
@inject RaceVarApiService raceVarApiService
@inject CharClassApiService charClassApiService
@inject StatsApiService statsApiService
@inject NavigationManager NavigationManager
@inject ILogger<CharacterCreator> logger
@rendermode InteractiveServer

<PageTitle>Create Character</PageTitle>

<h1>Create a new character!!</h1>

<h3>To begin, please enter your username and pin to validate player!</h3>

<EditForm Model="@character" OnValidSubmit="@HandleValidSubmit">
    <label for="Username" class="form-label">Username</label>
    <InputText id="Username" class="form-control"
                @bind-Value = "player.Username"/>
    <label for="Pin" class="form-label">Pin</label>
    <InputNumber id="Pin" class="form-control"
                @bind-Value = "player.Pin"/>
    @if (pinvalidated) {
        <div class="alert alert-warning" role="alert">Pin is valid!</div>
    }
    @if (usernamevalidated) {
        <div class="alert alert-warning" role="alert">Username is valid!</div>
    }

    <button type="submit" asp-page-handler="CheckValidity">Proceed</button>


    @if (!playervalidated) {
        <div class="alert alert-warning" role="alert">Username or Pin is invalid!</div>
    }
    @if(playervalidated){

    <label for="CharName" class="form-label">Character Name</label>
    <InputText id="CharName" class="form-control" @bind-Value="character.CharName" />

    <label for="RaceId" class="form-label">Character Race</label>
    <select id="RaceId" class="form-control" @bind="character.RaceId">
        <option value="null">Select A Race</option>
        @foreach (var race in races) {
            if(race.Starter != "No") {
                <option value="@race.Id">@race.RaceName</option>
            }
        }
    </select>

    <div id="variantDropdown" style="display: none;">
        <label for="RaceVariantId" class="form-label">Race Variant</label>
        <select id="RaceVariantId" class="form-control" @bind="character.RaceVariantId">
            @if(varraces != null && varraces.Count > 0){
                @foreach (var raceVariant in varraces) {
                    <option value="@raceVariant.Id">@raceVariant.Variant</option>
                }
            }
        </select>
    </div>
    <p></p>
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading) {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        } else {
            <span>Add</span>
        }
    </button>
}
</EditForm>

@code {
    private Character character = new Character();
    private Player player = new Player();
    private List<CharRace> races = new();
    private List<RaceVar> ?varraces;
    private bool isLoading = false;
    private bool playervalidated = false;
    private bool pinvalidated = false;
    private bool usernamevalidated = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEverything();
    }

    public async Task LoadEverything()
    {
        races = await charRaceApiService.GetAllRacesPerCampaign("Fantasy") ?? new List<CharRace>();
    }

    // Method to handle form submission
    private async Task HandleValidSubmit()
    {
        isLoading = true;
        // Validate form inputs
        if (string.IsNullOrEmpty(character.CharName))
        {
            isLoading = false;
            return;
        }

        //TODO: Create way to check if username has been used already and throw the form back to get a new
        //user name if that is the case.

        await characterApiService.AddThisCharacter(character);
        Console.WriteLine("I created a character and will now do a navigate!");

        NavigationManager.NavigateTo("/characters");
    }

    private async Task CheckValidity() {
        usernamevalidated = await CheckUsernameValidity();
        pinvalidated = await CheckPinValidity();
        if(playervalidated && pinvalidated) {
            playervalidated = true;
        }
        StateHasChanged();
    }

    private async Task<bool> CheckUsernameValidity() {
        List<Player>? listplayers = await playerApiService.GetAllPlayers();
        if (listplayers == null || listplayers.Count == 0) {
            return false;
        } else {
            foreach (Player playercheck in listplayers) {
                if (playercheck.Username == player.Username) {
                    return true;
                }
            }
            return false;
        }
    }

    private async Task<bool> CheckPinValidity() {
        List<Player>? listplayers = await playerApiService.GetAllPlayers();
        if (listplayers == null || listplayers.Count == 0) {
            return false;
        } else {
            foreach (Player playercheck in listplayers) {
                if (playercheck.Username == player.Username && playercheck.Pin == player.Pin) {
                    return true;
                }
            }
            return false;
        }
    }

    private async void OnRaceChange(ChangeEventArgs e, string racebase) {
        var thisvarraces = await raceVarApiService.GetThisVarRaceString(racebase);
        varraces = thisvarraces;
    }
}
